@inject ITranslator Translator
@inject ISnackbar Snackbar
@page "/brands"

<MudTable T="BrandDto"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          Bordered="true"
          Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Translator["Brand"]</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<BrandDto, object>(x => x.ImageUrl!)">@Translator[nameof(BrandDto.ImageUrl)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<BrandDto, object>(x => x.Name)">@Translator[nameof(BrandDto.Name)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<BrandDto, object>(x => x.Status)">@Translator[nameof(BrandDto.Status)]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="true" SortBy="new Func<BrandDto, object>(x => x.Description!)">@Translator[nameof(BrandDto.Description)]</MudTableSortLabel></MudTh>
        <MudTh>@Translator["Actions"]</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Translator[nameof(BrandDto.ImageUrl)]">
            <MudImage Src="@(context.ImageUrl ?? "/images/NoPicture.jpg")" ObjectFit="ObjectFit.Cover" Elevation="5" Width="100" Height="100" Class="rounded-lg" />
        </MudTd>
        <MudTd DataLabel="@Translator[nameof(BrandDto.Name)]">@context.Name</MudTd>
        <MudTd DataLabel="@Translator[nameof(BrandDto.Status)]">@Translator[context.Status]</MudTd>
        <MudTd DataLabel="@Translator[nameof(BrandDto.Description)]">@context.Description</MudTd>
        <MudTd DataLabel="@nameof(BrandDto.Id)">
            <MudLink Href="@($"/brands/{context.Id}")">
                <MudTooltip Text="@Translator[BlazorConstants.Edit]">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
                </MudTooltip>
            </MudLink>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="[10, 25, 50, 100]"
                       RowsPerPageString="Per page:"
                       AllItemsText="All"
                       HorizontalAlignment="HorizontalAlignment.Center"
                       HideRowsPerPage="false"
                       HidePageNumber="false"
                       HidePagination="false" />
    </PagerContent>
</MudTable>




@code {

    protected override void OnInitialized()
    {
        Snackbar.Add("Please check the reactor temperature and try again");
    }

    private async Task<TableData<BrandDto>> ServerReload(TableState state, CancellationToken cancellationToken)
    {

        try
        {
            var response = await FetchPageFromApi(state.Page + 1, state.PageSize);

            return new TableData<BrandDto>
            {
                Items = response.Items,
                TotalItems = response.TotalCount
            };
        }
        catch (Exception ex)
        {
            // Handle errors
            return new TableData<BrandDto>
            {
                Items = new List<BrandDto>(),
                TotalItems = 0
            };
        }
    }

    private async Task<PagedResponse<BrandDto>> FetchPageFromApi(int pageNumber, int pageSize)
    {
        await Task.Delay(500);

        var result = Enumerable.Range((pageNumber - 1) * pageSize, pageSize)
            .Select(x => new BrandDto
            {
                Name = $"برند شماره {x}",
                Status = x % 3 == 0 ? "Active" : "Inactive",
                Id = x.ToString(),
                Description = $"توضیحات برند شماره {x}",
                ImageUrl = x % 2 == 0 ? "https://www.mudblazor.com/images/tractor.jpg" : null,
            }).ToList();

        return new PagedResponse<BrandDto>()
        {
            Items = result,
            TotalCount = 100,
        };
    }

    private class BrandDto
    {
        public required string Id { get; init; }
        public required string Name { get; init; }
        public required string Status { get; init; }
        public string? ImageUrl { get; init; }
        public string? Description { get; init; }
    }

    public class PagedResponse<T>
    {
        public List<T> Items { get; init; } = new();
        public int TotalCount { get; init; }
    }
}
