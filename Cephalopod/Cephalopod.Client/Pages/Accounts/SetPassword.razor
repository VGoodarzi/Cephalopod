
<EditForm Model="InputModel" OnValidSubmit="OnValidSubmit" FormName="signInWithPassword">
    <FluentValidationValidator />
    <MudCard Class="mx-auto" Elevation="10">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@Translator["Badoomeh"]</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="@Translator["NewPassword"]"
                          @bind-Value="InputModel.Password"
                          For="@(() => InputModel.Password)"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                          OnAdornmentClick="() => _showPassword = !_showPassword"
                          InputType="@(_showPassword? InputType.Text: InputType.Password)" />
            <MudTextField Label="@Translator["CompareNewPassword"]"
                          Class="mt-3"
                          @bind-Value="InputModel.ComparePassword"
                          For="@(() => InputModel.ComparePassword)"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showComparePassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                          OnAdornmentClick="() => _showComparePassword = !_showComparePassword"
                          InputType="@(_showComparePassword? InputType.Text: InputType.Password)" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       FullWidth="true"
                       Disabled="_isLoading">
                @if (_isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                }
                else
                {
                    @Translator["Confirm"]
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private SetPasswordModel InputModel { get; init; } = new();

    [Parameter]
    public string? TemporaryAccessToken { get; init; }

    [Parameter]
    public EventCallback PasswordHasChanged { get; init; }

    private bool _isLoading = false;
    private bool _showPassword = false;
    private bool _showComparePassword = false;

    private async Task OnValidSubmit(EditContext _)
    {
        _isLoading = true;

        var request = InputModel.ToRequest();

        Result<ProblemDetails> result;
        if (TemporaryAccessToken is null)
            result = await AccountManager.SetPassword(request, CancellationToken.None);
        else
            result = await AccountManager.SetPassword(request, TemporaryAccessToken, CancellationToken.None);

        if (result.IsSuccess)
        {
            Snackbar.Add(Translator[BlazorConstants.PasswordsHasChanged], Severity.Success);
            await PasswordHasChanged.InvokeAsync();
        }
        else
        {
            Snackbar.Add(result.Error.Title, Severity.Error);
        }

        _isLoading = false;

        StateHasChanged();
    }


    public class SetPasswordModel
    {
        public string Password { get; set; } = string.Empty;
        public string ComparePassword { get; set; } = string.Empty;

        public SetPasswordRequest ToRequest() => new(Password);

        public class SetPasswordModelValidator : AbstractValidator<SetPasswordModel>
        {
            public SetPasswordModelValidator(ITranslator translator)
            {
                RuleFor(x => x.Password)
                    .NotEmpty().WithMessage(translator[BlazorConstants.RequiredField]);

                RuleFor(x => x.ComparePassword)
                    .Must((model, comparePassword) => comparePassword == model.Password)
                    .WithMessage(translator[BlazorConstants.PasswordsMustMatch]);
            }
        }
    }
}
