<EditForm Model="InputModel" OnValidSubmit="OnValidSubmit" FormName="signInWithPassword">
    <FluentValidationValidator />
    <MudCard Class="mx-auto" Elevation="10">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@Translator["Badoomeh"]</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Login" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="@Translator["UserNameOrPhoneNumber"]"
                          @bind-Value="InputModel.Username"
                          For="@(() => InputModel.Username)" />
            <MudTextField Label="@Translator["Password"]"
                          Class="mt-3"
                          @bind-Value="InputModel.Password"
                          For="@(() => InputModel.Password)" 
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                          OnAdornmentClick="() => _showPassword = !_showPassword"
                          InputType="@(_showPassword? InputType.Text: InputType.Password)" />
        </MudCardContent>
        <MudCardContent Class="pt-0 pb-0">
            <MudLink OnClick="ChangeToSignInWithOtp"
                     Typo="Typo.overline"
                     Underline="Underline.None">@Translator["SignInWithOtp"]</MudLink>
            <MudSpacer />
            <MudLink Href="/forgot-password"
                     Typo="Typo.overline"
                     Underline="Underline.None">@Translator["ForgotPassword"]</MudLink>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       FullWidth="true"
                       Disabled="_isLoading">
                @if (_isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Color="Color.Inherit" Indeterminate="true" />
                }
                else
                {
                    @Translator["Login"]
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>



@code {
    [Parameter]
    public required EventCallback<Login.SignInMethodType> SignInMethodChanged { get; set; }

    [Parameter]
    public required EventCallback<SignInResponse> OnSignInSucceeded { get; set; }

    [SupplyParameterFromForm]
    private SignInWithPasswordModel InputModel { get; init; } = new();

    private bool _isLoading = false;
    private bool _showPassword = false;

    private void ChangeToSignInWithOtp(MouseEventArgs _)
        => SignInMethodChanged.InvokeAsync(Login.SignInMethodType.Otp);

    private async Task OnValidSubmit(EditContext _)
    {
        _isLoading = true;

        var request = InputModel.ToRequest();

        var result = await AccountManager.SignIn(request, CancellationToken.None);

        if (result.IsSuccess)
        {
            await OnSignInSucceeded.InvokeAsync(result.Value);
        }
        else
        {
            Snackbar.Add(result.Error.Title, Severity.Error);
        }

        this.StateHasChanged();
        _isLoading = false;
    }


    public class SignInWithPasswordModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;

        public SignInWithPasswordRequest ToRequest()
        {
            if (Regex.IsMatch(Username, @"^(\+?98|0)9\d{9}$"))
                return new(Username.ToIranianPhoneNumber(), Password);

            return new(Username, Password);
        }
        public class SignInWithPasswordModelValidator : AbstractValidator<SignInWithPasswordModel>
        {
            public SignInWithPasswordModelValidator(ITranslator translator)
            {
                RuleFor(m => m.Username)
                    .NotEmpty().WithMessage(translator[BlazorConstants.RequiredField]);

                RuleFor(m => m.Password)
                    .NotEmpty().WithMessage(translator[BlazorConstants.RequiredField]);
            }
        }
    }

}