@page "/login"
@inject ITranslator Translator
@inject IUserService UserService
@inject ICacheService CacheService
@inject NavigationManager NavigationManager

<EditForm Model="LoginModel" OnValidSubmit="async (_) => await OnValidSubmit()" FormName="login">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="@Translator["UserNameOrPhoneNumber"]" @bind-Value="LoginModel.Username" For="@(() => LoginModel.Username)" />
                    <MudTextField Label="@Translator["Password"]" Class="mt-3" @bind-Value="LoginModel.Password" For="@(() => LoginModel.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto">@Translator["Login"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; init; }

    [SupplyParameterFromForm]
    private LoginRequest LoginModel { get; init; } = new();


    private async Task OnValidSubmit()
    {
        if ("admin".Equals(LoginModel.Username))
        {
            var request = LoginModel.ToRequest();

            var response = await UserService.SignInWithPassword(request, CancellationToken.None);

            await CacheService.Set(BlazorConstants.AccessTokenCookieName, response.AccessToken);
            await CacheService.Set(BlazorConstants.RefreshTokenCookieName, response.RefreshToken);

            NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }

        this.StateHasChanged();
    }

    private class LoginRequest
    {
        [Required] public string Username { get; set; } = string.Empty;
        [Required] public string Password { get; set; } = string.Empty;

        public SignInWithPasswordRequest ToRequest()
        {
            return new()
            {
                Password = Password,
                UserName = Username
            };
        }
    }
}